{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","key","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACE,0BAAMC,SAVa,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACvCN,EAAc,OAMlB,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAI/B,OAFAc,QAAQC,IAAIf,GAGR,yBAAKgB,UAAW,0CACZ,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,+BAAKA,EAAL,OCLCS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAaxC,OAPAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACpCjB,KAAMoB,EACNL,SAAS,SAEd,CAACtB,IAEGuB,EDX6BK,CAAa5B,GAAnC6B,EADyB,EAC/BtB,KAAgBe,EADe,EACfA,QAExB,OACE,oCACE,wBAAIJ,UAAW,qCAAf,IAAsDlB,EAAtD,KAECsB,GAAW,uBAAGJ,UAAW,oCAAd,eAEZ,yBAAKA,UAAW,aACbW,EAASpB,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,eAAaoB,IAAKpB,EAAIC,IAAQD,UEX3BqB,EAAe,WAAM,MAGM7C,mBAAS,CAAC,cAHhB,mBAGvB8C,EAHuB,KAGX/C,EAHW,KAU9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,6CAEA,4BACK+C,EAAWvB,KAAI,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CAAS8B,IAAK9B,EAAUA,SAAUA,UCnBtDiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.0e21f062.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handelSubmit = (e) => {\n      e.preventDefault();\n\n      if( inputValue.trim().length >2 ) {\n          setCategories( cats =>  [inputValue,...cats]);\n          setInputValue('');\n      }\n  };\n\n  return (\n    <form onSubmit={handelSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=JTvU3L0oFG71MkOO13bJDY6DdtXbF9GT`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n    console.log(url);\n\n    return (\n        <div className={'card animate__animated animate__fadeIn'}>\n            <img src={url} alt={title}/>\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: imagenes, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className={'animate__animated animate__fadeIn'}> {category} </h3>\n\n      {loading && <p className={'animate__animated animate__flash'}> Loading.. </p>}\n\n      <div className={\"card-grid\"}>\n        {imagenes.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n      getGifs(category).then(imgs => setState({\n          data: imgs,\n          loading: false\n      }))\n  }, [category]);\n\n  return state; // {data: [], loading: true}\n};\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch','Samuray X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['One Punch']);\n\n    /*const handleAdd = () => {\n        //setCategories([...categories, 'HunterXhunter'] );\n        setCategories( cats => [...cats,'HunterXhunter']);\n    }*/\n\n    return (\n        <>\n            <h2>GifExpertAPp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <button> Agregar </button>\n\n            <ol>\n                {categories.map(category=> (\n                    <GifGrid key={category} category={category}/>\n                ))}\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}